"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pr0grammUserService = exports.Pr0grammMessageService = exports.Pr0grammContactService = exports.Pr0grammTagsService = exports.Pr0grammCommentsService = exports.Pr0grammProfileService = exports.Pr0grammItemsService = exports.Pr0grammAPI = void 0;
const util_1 = require("./util");
class Pr0grammAPI {
    constructor(requester) {
        this.requester = requester;
        this.items = new Pr0grammItemsService(requester);
        this.tags = new Pr0grammTagsService(requester);
        this.messages = new Pr0grammMessageService(requester);
        this.comments = new Pr0grammCommentsService(requester);
        this.profile = new Pr0grammProfileService(requester);
        this.contact = new Pr0grammContactService(requester);
        this.user = new Pr0grammUserService(requester);
    }
    static create(requester) {
        return new Pr0grammAPI(requester);
    }
}
exports.Pr0grammAPI = Pr0grammAPI;
class Pr0grammItemsService {
    constructor(requester) {
        this.requester = requester;
    }
    delete(options) {
        return this.requester.post("/items/delete", options);
    }
    getInfo(itemId) {
        return this.requester.get("/items/info", { itemId });
    }
    getItems(options) {
        return this.requester.get("/items/get", Pr0grammItemsService.parseRawGetItemsOptions(options));
    }
    getItemsNewer(options) {
        return this.requester.get("/items/get", Object.assign({ newer: options.newer }, Pr0grammItemsService.parseRawGetItemsOptions(options)));
    }
    getItemsOlder(options) {
        return this.requester.get("/items/get", Object.assign({ older: options.older }, Pr0grammItemsService.parseRawGetItemsOptions(options)));
    }
    getItemsAround(options) {
        return this.requester.get("/items/get", Object.assign({ id: options.around }, Pr0grammItemsService.parseRawGetItemsOptions(options)));
    }
    walkStreamNewer(options) {
        return this.walkStream(options.newer, options, {
            getNextId: res => res.items[res.items.length - 1].id,
            shouldContinue: res => !res.atStart,
            getItems: (opts, currentId) => this.getItemsNewer(Object.assign(Object.assign({}, opts), { newer: currentId })),
        });
    }
    walkStreamOlder(options) {
        return this.walkStream(options.older, options, {
            getNextId: res => res.items[res.items.length - 1].id,
            shouldContinue: res => !res.atEnd,
            getItems: (opts, currentId) => this.getItemsOlder(Object.assign(Object.assign({}, opts), { older: currentId })),
        });
    }
    walkStream(start, options, functions) {
        return __asyncGenerator(this, arguments, function* walkStream_1() {
            const fns = Object.assign({}, functions);
            let currentId = start;
            let lastCurrentId;
            let response = null;
            do {
                response = yield __await(fns.getItems(options, currentId));
                const items = response.items;
                if (!items || items.length <= 0)
                    break;
                yield __await(yield* __asyncDelegator(__asyncValues(items)));
                lastCurrentId = currentId;
                currentId = fns.getNextId(response);
                if (lastCurrentId === currentId)
                    break;
            } while (fns.shouldContinue(response));
        });
    }
    static parseRawGetItemsOptions(options) {
        return {
            flags: options.flags,
            promoted: options.promoted ? 1 : 0,
            self: options.self ? 1 : 0,
            tags: options.tags ? (0, util_1.createTagList)(options.tags) : undefined,
            user: options.user,
            likes: options.likes,
            collection: options.collection,
        };
    }
    vote(id, absoluteVote) {
        return this.requester.post("/items/vote", {
            id,
            vote: absoluteVote,
        });
    }
    rateLimited() {
        return this.requester.post("/items/ratelimited");
    }
}
exports.Pr0grammItemsService = Pr0grammItemsService;
class Pr0grammProfileService {
    constructor(requester) {
        this.requester = requester;
    }
    getCommentsBefore(name, flags, before) {
        return this.requester.get("/profile/comments", {
            name,
            flags,
            before: (0, util_1.ensureUnixTimestamp)(before),
        });
    }
    getCommentsAfter(name, flags, after) {
        return this.requester.get("/profile/comments", {
            name,
            flags,
            after: (0, util_1.ensureUnixTimestamp)(after),
        });
    }
    follow(name) {
        return this.requester.post("/profile/follow", { name });
    }
    unfollow(name) {
        return this.requester.post("/profile/unfollow", { name });
    }
    getInfo(name, flags) {
        return this.requester.get("/profile/info", { name, flags });
    }
}
exports.Pr0grammProfileService = Pr0grammProfileService;
class Pr0grammCommentsService {
    constructor(requester) {
        this.requester = requester;
    }
    delete(id, reason) {
        return this.requester.post("/comments/delete", { id, reason });
    }
    softDelete(id, reason) {
        return this.requester.post("/comments/softDelete", { id, reason });
    }
    edit(id, newContent) {
        return this.requester.post("/comments/edit", { commentId: id, comment: newContent });
    }
    vote(id, absoluteVote) {
        return this.requester.post("/comments/vote", { id, vote: absoluteVote, });
    }
    post(itemId, content, replyTo = 0) {
        return this.requester.post("/comments/post", {
            comment: content,
            itemId,
            parentId: replyTo,
        });
    }
}
exports.Pr0grammCommentsService = Pr0grammCommentsService;
class Pr0grammTagsService {
    constructor(requester) {
        this.requester = requester;
    }
    add(itemId, tags) {
        return this.requester.post("/tags/add", {
            itemId,
            tags: (0, util_1.createTagList)(tags),
            submit: "Tags speichern",
        });
    }
    delete(itemId, banUsers, days, tags) {
        return this.requester.post("/tags/delete", { itemId, tags, banUsers, days });
    }
    getDetails(itemId) {
        return this.requester.get("/tags/details", { itemId });
    }
    vote(id, absoluteVote) {
        return this.requester.post("/tags/vote", { id, vote: absoluteVote });
    }
}
exports.Pr0grammTagsService = Pr0grammTagsService;
class Pr0grammContactService {
    constructor(requester) {
        this.requester = requester;
    }
    send(email, subject, message) {
        return this.requester.post("/contact/send", { email, subject, message });
    }
}
exports.Pr0grammContactService = Pr0grammContactService;
class Pr0grammMessageService {
    constructor(requester) {
        this.requester = requester;
    }
    getComments() {
        return this.requester.get("/inbox/comments");
    }
    getCommentsOlder(older) {
        return this.requester.get("/inbox/comments", { older });
    }
    getConversations() {
        return this.requester.get("/inbox/conversations");
    }
    getConversationsOlder(older) {
        return this.requester.get("/inbox/conversations", { older });
    }
    getMessages(user) {
        return this.requester.get("/inbox/messages", { with: user });
    }
    sendMessage(recipientName, comment) {
        return this.requester.post("/inbox/post", { recipientName, comment });
    }
}
exports.Pr0grammMessageService = Pr0grammMessageService;
class Pr0grammUserService {
    constructor(requester) {
        this.requester = requester;
    }
    ban(user, reason, days) {
        return this.requester.post("/user/ban", { user, reason, days });
    }
    changeEmail(token) {
        return this.requester.post("/user/changeemail", { token });
    }
    changePassword(newPassword) {
        return this.requester.post("/user/changepassword", { password: newPassword });
    }
    getFollowList(flags) {
        return this.requester.get("/user/followlist", { flags });
    }
    getInfo() {
        return this.requester.get("/user/info");
    }
    invite(email) {
        return this.requester.post("/user/invite", { email });
    }
    joinWithInvite(token, email, password, name) {
        return this.requester.post("/user/joinwithinvite", { token, email, password, name });
    }
    joinWithToken(token, email, password, name) {
        return this.requester.post("/user/joinwithtoken", { token, email, password, name });
    }
    loadInvite(token) {
        return this.requester.get("/user/loadinvite", { token });
    }
    loadPaymentToken(token) {
        return this.requester.post("/user/loadpaymenttoken", { token });
    }
    requestCaptcha() {
        return this.requester.post("/user/captcha", undefined, true);
    }
    login(name, password, captchaToken, captchaSolution) {
        return this.requester.post("/user/login", {
            name,
            password,
            token: captchaToken,
            captcha: captchaSolution,
        }, true);
    }
    logout(id) {
        return this.requester.post("/user/logout", { id });
    }
    redeemToken(token) {
        return this.requester.post("/user/redeemtoken", { token });
    }
    requestEmailChange(newEmail) {
        return this.requester.post("/user/requestemailchange", { email: newEmail });
    }
    resetPassword(name, password, token) {
        return this.requester.post("/user/resetpassword", { name, password, token });
    }
    sendPasswordResetMail(email) {
        return this.requester.post("/user/sendpasswordresetmail", { email }, true);
    }
    setSiteSettings(siteSettings) {
        const options = {
            likesArePublic: siteSettings.likesArePublic,
            showAds: siteSettings.showAds,
            userStatus: "um" + siteSettings.userStatus
        };
        return this.requester.post("/user/sitesettings", options);
    }
    sync(offset) {
        return this.requester.get("/user/sync", { offset });
    }
    validate(token) {
        return this.requester.post("/user/validate", { token });
    }
    getIdentifier() {
        return this.requester.get("/user/identifier");
    }
    getUserName() {
        return this.requester.get("/user/name");
    }
    getUserScore() {
        return this.requester.get("/user/score");
    }
    getMe() {
        return this.requester.get("/user/me");
    }
}
exports.Pr0grammUserService = Pr0grammUserService;

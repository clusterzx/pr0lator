"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserRequester = void 0;
const client_constants_1 = require("../client-constants");
const util_1 = require("../util");
class BrowserRequester {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        this.oAuthAccessToken = undefined;
        this.apiUrl = baseUrl + client_constants_1.PR0GRAMM_API_PATH;
    }
    static create(baseUrl = client_constants_1.PR0GRAMM_BASE_URL) {
        return new BrowserRequester(baseUrl);
    }
    setOAuthAccessToken(accessToken) {
        this.oAuthAccessToken = accessToken;
    }
    get(path, queryString) {
        const url = (0, util_1.addQueryParams)(this.apiUrl + path, queryString);
        const headers = (0, util_1.addApiKeyToHeader)(BrowserRequester.headers, this.oAuthAccessToken);
        return fetch(url, {
            method: "get",
            headers,
            credentials: "include",
        }).then(processResponse);
    }
    post(path, body = {}, ignoreNonce = false) {
        const url = this.apiUrl + path;
        let headers = BrowserRequester.headers;
        if (!ignoreNonce) {
            if (this.oAuthAccessToken) {
                headers = (0, util_1.addApiKeyToHeader)(headers, this.oAuthAccessToken);
            }
            else {
                const meCookie = this.getMeCookie();
                if (meCookie === null || !meCookie.id)
                    throw new Error(`Not logged in. The post request to ${path} requires authentication.`);
                body["_nonce"] = meCookie.id.substr(0, 16);
            }
        }
        return fetch(url, {
            method: "post",
            headers,
            credentials: "include",
            body: (0, util_1.encodeQueryParams)(body),
        }).then(processResponse);
    }
    getMeCookie() {
        const data = parseCookie(document.cookie);
        return "me" in data
            ? data.me
            : null;
    }
}
BrowserRequester.headers = (0, util_1.createDefaultHeaders)();
exports.BrowserRequester = BrowserRequester;
function processResponse(res) {
    if (!res.ok)
        throw new Error(res.statusText);
    return res.json();
}
function parseCookie(value) {
    return value
        .split(";")
        .reduce((res, c) => {
        const [key, val] = c.trim()
            .split('=')
            .map(decodeURIComponent);
        try {
            return Object.assign(res, { [key]: JSON.parse(val) });
        }
        catch (e) {
            return Object.assign(res, { [key]: val });
        }
    }, {});
}

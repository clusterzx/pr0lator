"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeRequester = void 0;
const needle = require("needle");
const client_constants_1 = require("../client-constants");
const util_1 = require("../util");
class NodeRequester {
    constructor(cookies, baseUrl) {
        this.cookies = cookies;
        this.baseUrl = baseUrl;
        this.oAuthAccessToken = undefined;
        this.apiUrl = baseUrl + client_constants_1.PR0GRAMM_API_PATH;
    }
    setOAuthAccessToken(accessToken) {
        this.oAuthAccessToken = accessToken;
    }
    static create(baseUrl = client_constants_1.PR0GRAMM_BASE_URL, cookies) {
        const cs = !cookies
            ? false
            : (cookies ? cookies : {});
        return new NodeRequester(cs, baseUrl);
    }
    get(path, queryString) {
        const url = (0, util_1.addQueryParams)(this.apiUrl + path, queryString);
        const headers = (0, util_1.addApiKeyToHeader)(NodeRequester.headers, this.oAuthAccessToken);
        return needle("get", url, null, {
            cookies: this.cookies || undefined,
            follow_set_cookies: true,
            headers,
            parse_response: "json",
            parse_cookies: true,
        }).then(res => {
            if (res.cookies)
                this.cookies = res.cookies;
            if (res.statusCode && 200 <= res.statusCode && res.statusCode < 300)
                return res.body;
            throw new ApiError(res);
        });
    }
    post(path, body = {}, ignoreNonce = false) {
        const url = this.apiUrl + path;
        let headers = NodeRequester.headers;
        if (!ignoreNonce) {
            if (this.oAuthAccessToken) {
                headers = (0, util_1.addApiKeyToHeader)(headers, this.oAuthAccessToken);
            }
            else {
                const meCookie = this.getMeCookie();
                if (meCookie === null || !meCookie.id)
                    throw new Error(`Not logged in. The post request to ${path} requires authentication.`);
                body["_nonce"] = meCookie.id.substr(0, 16);
            }
        }
        return needle("post", url, body, {
            cookies: this.cookies || undefined,
            follow_set_cookies: true,
            headers,
            parse_response: "json",
            parse_cookies: true,
            content_type: "application/x-www-form-urlencoded",
        }).then(res => {
            if (res.cookies)
                this.cookies = res.cookies;
            if (res.statusCode && 200 <= res.statusCode && res.statusCode < 300)
                return res.body;
            throw new ApiError(res);
        });
    }
    getMeCookie() {
        const thisCookies = this.cookies;
        if (thisCookies === false)
            return null;
        const me = thisCookies === null || thisCookies === void 0 ? void 0 : thisCookies.me;
        if (me) {
            return JSON.parse(me);
        }
        if (typeof thisCookies.getCookies === "function") {
            const cs = thisCookies.getCookies(this.baseUrl);
            for (const c of cs) {
                if (!c)
                    continue;
                const ct = c;
                if (ct.key === "me") {
                    const meCookeStr = decodeURIComponent(ct.value);
                    try {
                        return JSON.parse(meCookeStr);
                    }
                    catch (ex) {
                        return null;
                    }
                }
            }
        }
        return null;
    }
}
NodeRequester.headers = (0, util_1.createDefaultHeaders)();
exports.NodeRequester = NodeRequester;
class ApiError extends Error {
    constructor(response) {
        super(response.statusMessage);
        this.response = response;
    }
}

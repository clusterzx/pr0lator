import * as Response from "./responses";
import * as Types from "./common-types";
import { APIRequester } from "./requester";
export declare class Pr0grammAPI {
    readonly requester: APIRequester;
    readonly items: Pr0grammItemsService;
    readonly tags: Pr0grammTagsService;
    readonly messages: Pr0grammMessageService;
    readonly comments: Pr0grammCommentsService;
    readonly profile: Pr0grammProfileService;
    readonly contact: Pr0grammContactService;
    readonly user: Pr0grammUserService;
    private constructor();
    static create(requester: APIRequester): Pr0grammAPI;
}
export declare class Pr0grammItemsService {
    private readonly requester;
    constructor(requester: APIRequester);
    delete(options: DeleteItemOptions): Promise<Response.Pr0grammResponse>;
    getInfo(itemId: Types.ItemID): Promise<Response.GetItemsInfoResponse>;
    getItems(options: GetItemsOptions): Promise<Response.GetItemsResponse>;
    getItemsNewer(options: GetItemsNewerOptions): Promise<Response.GetItemsResponse>;
    getItemsOlder(options: GetItemsOlderOptions): Promise<Response.GetItemsResponse>;
    getItemsAround(options: GetItemsAroundOptions): Promise<Response.GetItemsResponse>;
    walkStreamNewer(options: GetItemsNewerOptions): AsyncIterableIterator<Types.Item>;
    walkStreamOlder(options: GetItemsOlderOptions): AsyncIterableIterator<Types.Item>;
    walkStream(start: Types.ItemID, options: GetItemsOptions, functions: WalkStreamFunctions): AsyncIterableIterator<Types.Item>;
    private static parseRawGetItemsOptions;
    vote(id: Types.ItemID, absoluteVote: Types.Vote): Promise<Response.Pr0grammResponse>;
    rateLimited(): Promise<Response.Pr0grammResponse>;
}
export interface DeleteItemOptions {
    itemId: Types.ItemID;
    days: number;
    banUser: boolean;
    notifyUser: boolean;
    reason: Types.DeleteItemReason;
    customReason: string;
}
export interface GetItemsOptions {
    flags: Types.ItemFlags;
    promoted: boolean;
    self?: boolean;
    tags?: Types.TagContent[];
    user?: Types.Username;
    likes?: Types.Likes;
    collection?: Types.Collection;
}
export interface GetItemsNewerOptions extends GetItemsOptions {
    newer: Types.ItemID;
}
export interface GetItemsOlderOptions extends GetItemsOptions {
    older: Types.ItemID;
}
export interface GetItemsAroundOptions extends GetItemsOptions {
    around: Types.ItemID;
}
export interface WalkStreamNewerOptions extends GetItemsNewerOptions {
    end?: Types.ItemID;
}
export interface WalkStreamFunctions {
    getNextId(response: Response.GetItemsResponse): Types.ItemID;
    shouldContinue(response: Response.GetItemsResponse): boolean;
    getItems(options: GetItemsOptions, currentId: Types.ItemID): Promise<Response.GetItemsResponse>;
}
export declare class Pr0grammProfileService {
    private readonly requester;
    constructor(requester: APIRequester);
    getCommentsBefore(name: Types.Username, flags: Types.ItemFlags, before: Types.Timestamp): Promise<Response.GetCommentsResponse>;
    getCommentsAfter(name: Types.Username, flags: Types.ItemFlags, after: Types.Timestamp): Promise<Response.GetCommentsResponse>;
    follow(name: Types.Username): Promise<Response.Pr0grammResponse>;
    unfollow(name: Types.Username): Promise<Response.Pr0grammResponse>;
    getInfo(name: Types.Username, flags: Types.ItemFlags): Promise<Response.GetProfileInfoResponse>;
}
export declare class Pr0grammCommentsService {
    private readonly requester;
    constructor(requester: APIRequester);
    delete(id: Types.CommentID, reason: string): Promise<Response.Pr0grammResponse>;
    softDelete(id: Types.CommentID, reason: string): Promise<Response.Pr0grammResponse>;
    edit(id: Types.CommentID, newContent: string): Promise<Response.Pr0grammResponse>;
    vote(id: Types.CommentID, absoluteVote: Types.Vote): Promise<Response.Pr0grammResponse>;
    post(itemId: Types.ItemID, content: string, replyTo?: Types.CommentID): Promise<Response.PostCommentResponse>;
}
export declare class Pr0grammTagsService {
    private readonly requester;
    constructor(requester: APIRequester);
    add(itemId: Types.ItemID, tags: readonly Types.TagContent[]): Promise<Response.Pr0grammResponse>;
    delete(itemId: Types.ItemID, banUsers: boolean, days: Types.BanDuration, tags: readonly Types.TagContent[]): Promise<Response.Pr0grammResponse>;
    getDetails(itemId: Types.ItemID): Promise<Response.GetDetailsResponse>;
    vote(id: Types.TagID, absoluteVote: Types.Vote): Promise<Response.Pr0grammResponse>;
}
export declare class Pr0grammContactService {
    private readonly requester;
    constructor(requester: APIRequester);
    send(email: Types.Email, subject: string, message: string): Promise<Response.Pr0grammResponse>;
}
export declare class Pr0grammMessageService {
    private readonly requester;
    constructor(requester: APIRequester);
    getComments(): Promise<Response.InboxCommentsResponse>;
    getCommentsOlder(older: Types.Timestamp): Promise<Response.InboxCommentsResponse>;
    getConversations(): Promise<Response.ConversationResponse>;
    getConversationsOlder(older: Types.ConversationID): Promise<Response.ConversationResponse>;
    getMessages(user: Types.Username): Promise<Response.MessagesResponse>;
    sendMessage(recipientName: Types.Username, comment: Types.MessageComment): Promise<Response.MessagesResponse>;
}
export declare class Pr0grammUserService {
    private readonly requester;
    constructor(requester: APIRequester);
    ban(user: Types.Username, reason: string, days: Types.BanDuration): Promise<Response.Pr0grammResponse>;
    changeEmail(token: Types.ChangeEmailToken): Promise<Response.ChangeUserDataResponse>;
    changePassword(newPassword: Types.Password): Promise<Response.ChangeUserDataResponse>;
    getFollowList(flags: Types.ItemFlags): Promise<Response.GetFollowListReponse>;
    getInfo(): Promise<Response.GetUserInfoResponse>;
    invite(email: Types.Email): Promise<Response.ChangeUserDataResponse>;
    joinWithInvite(token: Types.InviteToken, email: Types.Email, password: Types.Password, name: Types.Username): Promise<Response.ChangeUserDataResponse>;
    joinWithToken(token: Types.InviteToken, email: Types.Email, password: Types.Password, name: Types.Username): Promise<Response.TokenResponse>;
    loadInvite(token: Types.InviteToken): Promise<Response.LoadInviteResponse>;
    loadPaymentToken(token: Types.PaymentToken): Promise<Response.TokenInfoResponse>;
    requestCaptcha(): Promise<CaptchaResponse>;
    login(name: Types.Username, password: Types.Password): Promise<Response.LogInResponse>;
    login(name: Types.Username, password: Types.Password, captchaToken: CaptchaResponse["token"], captchaSolution: string): Promise<Response.LogInResponse>;
    logout(id: Types.SessionID): Promise<Response.Pr0grammResponse>;
    redeemToken(token: Types.InviteToken): Promise<Response.TokenResponse>;
    requestEmailChange(newEmail: Types.Email): Promise<Response.ChangeUserDataResponse>;
    resetPassword(name: Types.Username, password: Types.Password, token: Types.ChangePasswordToken): Promise<Response.ChangeUserDataResponse>;
    sendPasswordResetMail(email: Types.Email): Promise<Response.Pr0grammResponse>;
    setSiteSettings(siteSettings: SiteSettingsOptions): Promise<Response.ChangeUserDataResponse>;
    sync(offset: Types.SyncID): Promise<Response.SyncResponse>;
    validate(token: Types.Token): Promise<Response.SuccessableResponse>;
    getIdentifier(): Promise<Response.GetIdentifierResponse>;
    getUserName(): Promise<Response.GetUserNameResponse>;
    getUserScore(): Promise<Response.GetUserScoreResponse>;
    getMe(): Promise<Response.GetMeResponse>;
}
export interface CaptchaResponse {
    token: string;
    captcha: string;
}
export interface SiteSettingsOptions {
    likesArePublic: boolean;
    showAds: boolean;
    userStatus: Types.UserMark;
}
